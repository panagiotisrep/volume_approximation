demo()
install.packages('Rcpp')
install.packages('RcppEigen')
install.packages('BH')
install.packages('lpSolveAPI')
library("volesti")
P = gen_cube(3, 'V')
points = sample_points(P, N=2000, distribution="uniform", random_walk = "BiW", walk_length = 5)
# draw boundary of spectrahedron
f <- function(x,y) 3 + x -x^3 - 3*x^2 - 2*y^2
x <- y <- seq(-10,10,length=100)
z <- outer(x,y,f)
contour(
x=x, y=x, z=z,
levels=0, las=1, drawlabels=FALSE, lwd=3, xlim = c(-1.5, 1.5),
ylim = c(-2, 2), col = "red"
)
points(points[1,], points[2,])
library("volesti")
P=gen_prod_simplex(20)
vol=0
for (i in 1:10) {
vol=vol+volume(P,algo = 'CB',random_walk = 'BiW')
}
(1/prod(1:20))^2
vol
library("volesti")
d = 150
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=1, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=1, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=1, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=1, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=1, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,4*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,6*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,6*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150)) {
P = volesti::gen_rand_hpoly(d,6*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150,175)) {
P = volesti::gen_rand_hpoly(d,6*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
for (d in c(25,50,75,100,125,150,175)) {
P = volesti::gen_rand_hpoly(d,6*d)
start.time <- Sys.time()
points = sample_points(P, N=10, distribution="uniform", random_walk = "RDHR", walk_length = 1)
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
}
library("volesti")
library("volesti")
for (d in c(25,50,100,125)) {
str=sprintf("cube_%d.ine",d)
P = volesti::file_to_polytope(path = str)
vol=0
start.time <- Sys.time()
for (i in 1:1) {
vol=vol+volume(P,algo = 'CB',random_walk = 'Biw', walk_length = 5)
}
vol = vol / 1
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
print(vol)
}
for (d in c(25,50,100,125)) {
str=sprintf("cube_%d.ine",d)
P = volesti::file_to_polytope(path = str)
vol=0
start.time <- Sys.time()
for (i in 1:1) {
vol=vol+volume(P,algo = 'CB',random_walk = 'Biw', walk_length = 5)
}
vol = vol / 1
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
print(vol)
}
for (d in c(25,50,100,125)) {
str=sprintf("cube_%d.ine",d)
P = volesti::file_to_polytope(path = str)
vol=0
start.time <- Sys.time()
for (i in 1:1) {
vol=vol+volume(P,algo = 'CB',random_walk = 'Biw', walk_length = 5)
}
vol = vol / 1
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
print(vol)
}
for (d in c(25,50,100,125)) {
str=sprintf("cube_%d.ine",d)
P = volesti::file_to_polytope(path = str)
vol=0
start.time <- Sys.time()
for (i in 1:1) {
vol=vol+volume(P,algo = 'CB',random_walk = 'Biw', walk_length = 5)
}
vol = vol / 1
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
print(vol)
}
setwd("~/Documents/R scripts")
for (d in c(25,50,100,125)) {
str=sprintf("cube_%d.ine",d)
P = volesti::file_to_polytope(path = str)
vol=0
start.time <- Sys.time()
for (i in 1:1) {
vol=vol+volume(P,algo = 'CB',random_walk = 'Biw', walk_length = 5)
}
vol = vol / 1
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
print(vol)
}
for (d in c(25,50,100,125)) {
str=sprintf("cube_%d.ine",d)
P = volesti::file_to_polytope(path = str)
vol=0
start.time <- Sys.time()
for (i in 1:1) {
vol=vol+volume(P,algo = 'CB',random_walk = 'BiW', walk_length = 5)
}
vol = vol / 1
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
print(vol)
}
for (d in c(25,50,100,125)) {
str=sprintf("cube_%d.ine",d)
P = volesti::file_to_polytope(path = str)
vol=0
start.time <- Sys.time()
for (i in 1:1) {
vol=vol+volume(P,algo = 'CB',random_walk = 'CDHR')
}
vol = vol / 1
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
print(vol)
}
d=150
str=sprintf("cube_%d.ine",d)
P = volesti::file_to_polytope(path = str)
vol=0
start.time <- Sys.time()
for (i in 1:1) {
vol=vol+volume(P,algo = 'CB',random_walk = 'CDHR')
}
vol = vol / 1
end.time <- Sys.time()
time.taken <- end.time - start.time
print(time.taken)
print(vol)
load("~/Gits/volume_approximation_eigen_implementation/volume_approximation/R-proj/volesti.Rproj")
